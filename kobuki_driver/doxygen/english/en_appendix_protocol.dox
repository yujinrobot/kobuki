/**

@page enAppendixProtocolSpecification Appendix : Protocol Specification

@tableofcontents

<!-----------------------------
         Overview
------------------------------->

@section enOverview Overview

The @ref kobuki::Kobuki "kobuki driver" communicates with the robot by using predefined protocol. In general, the driver sends the commands to the robot and the robot sends some feedback data or sensor readings. These commands and feedback data are converted into bytestreams for communication via serial interface. The protocol specifies that rules and forms of bytestreams.


<!-----------------------------
     Structure of Bytestream
------------------------------->

@section enBytestream Structure of Bytestream

A bytestream can be divided into 4 fields; Headers, Length, Payload and Checksum.

<table>
<tr align="center"><th>Name</th><td>Header 0</td><td>Header 1</td><td>Length</td><td>Payload</td><td>Checksum</td>
<tr align="center"><th>Size</th><td>1 Byte</td><td>1 Byte</td><td>1 Byte</td><td>N Bytes</td><td>1 Byte</td>
<tr align="center"><th align="center">Description</th><td width="100">0xAA<br>(Fixed)</td><td width="100">0x55<br>(Fixed)</td><td width="100">Size of payload in bytes</td><td width="100">Described below</td><td width="100">XOR'ed value of every bytes of bytesream except headers</td>
</table>

<br>

<!--- Header --->

@subsection enHeader Header

Two bytes of headers, header 0 and hader 1, are fixed value for both bytestreams, commands and feedback data. This headers are used to detect the starting point of bytestream.

<br>

<!--- Length --->

@subsection enLength Length

Length indicates the length of following bytes that single bytestream hold. Default size of this field is 1 byte. Length can be used to distinguish each bytestreams. Minimum value of this field is 3.

<br>

<!--- Payload --->

@subsection enPayload Payload

Payload contains actual data of bytestream.

<br>

<!--- Structure Of Payload --->
@par
@subsubsection enStructureOfPayload Structure Of Payload
<!--@par <b>Structure of Payload</b>-->

@par
Payload is a consist of several sub-payloads.

@par
<table>
<tr align="center"><!--th>Payload</th--><td colspan="5">Payload</td></tr>
<tr align="center"><!--th>Sub-Payloads</th--><td>Sub-Payload 0</td><td>Sub-Payload 1</td><td>Sub-Payload 2</td><td>...</td><td>Sub-Payload N-1</td></tr>
</table>

<br>



<!--- Structure Of Sub-Payloads --->
@subsubsection enStructureOfSubPayloads Structure Of Sub-Payloads

@par
Sub-payload can be divided into three parts; Header, Length and Data.

@par
<table>
<tr align="center"><th>Name</th><td>Header</td><td>Length</td><td>Data</td>
<tr align="center"><th>Size</th><td>1 Byte</td><td>1 Byte</td><td>N Byte(s)</td>
<tr align="center"><th align="center">Description</th><td width="100">Predefined Identifier</td><td width="100">Size of data in byte(s)</td><td width="100">Described below</td>
</table>

<br>



<!--- Checksum --->
@subsection enChecksum Checksum

Checksum is XOR'ed value of entire bytestream except headers. Checksum process ensure the integrity of bytestreams.

Here is simple code snippet for it.
@code
unsigned int packet_size(buffer.size());
unsigned char cs(0);
for (unsigned int i = 2; i < packet_size; i++)
{
  cs ^= buffer[i];
}
return cs ? false : true;
@endcode

<br>


<!--- Entire Bytestream --->
@subsection enEntireBytestream Entire Bytestream

<table>
<tr align="center"><td colspan="2">Headers</td><td rowspan="2">Length</td><td colspan="5">Payload</td><td rowspan="2">Checksum</td></tr>
<tr align="center"><td>Header 0</td><td>Header 1</td><td>Sub-Payload 0</td><td>Sub-Payload 1</td><td>Sub-Payload 2</td><td>...</td><td>Sub-Payload N-1</td></tr>
</table>

Above table shows the structure of entire bytestream.

Minimum length of payload is 3; Payload with a sub-payload, that has only 1 byte data.

Theoretical minimum length of entire packet(bytestream) is 7.

<br>


<!-----------------------------
          Data Types
------------------------------->

@section enDataTypes Data Types

Data field in Sub-payload is a mixture of below three data types; byte, short and int.
<table>
<tr align="center"><th>Name</th><th>Description</th><th>Byte Length</th><th>Bit Length</th><th>Data Range</th><th colspan="2">C/C++ Identifier</th></tr>
<tr align="center"><td>Unsigned Byte</td><td>8-bit unsigned integer</td><td>1</td><td>8</td><td>0~255</td><td>unsigned char</td><td>uint8_t</td></tr>
<tr align="center"><td>Unsigned Short</td><td>16-bit unsigned integer</td><td>2</td><td>16</td><td>0~65,535</td><td>unsigned short</td><td>uint16_t</td></tr>
<tr align="center"><td>Unsigned Int</td><td>32-bit unsigned integer</td><td>4</td><td>32</td><td>0~4,294,967,295</td><td>unsigned int</td><td>uint32_t</td>	</tr>
</table>

<br>


<!--- Serialization-Deserialization --->
@subsection enSerializationDerialization Serialization-Deserialization
<!--or encodigns?-->

<a href="http://en.wikipedia.org/wiki/Serialization">Serialization</a> is the process of converting a data structure into a bytestream. Deserialization is reversal process. Each data types are serialized and deserialized by `<a href="http://en.wikipedia.org/wiki/Least_significant_byte">LSB</a>-First Order`. It means Least Significant Bytes will comes first on the bytestream. For example, The integer number 2,864,434,397(0xAABBCCDD) can be serialized <!-- or encoded?--> into:
<table>
<tr><td>0xDD</td><td>0xCC</td><td>0xBB</td><td>0xAA</td></tr>
</table>
So, 0xDD will arrive first in bytestream.

Here are template functions to handle it on kobuki_deriver, @ref packet_handler::payloadBase::buildVariable(T & V, ecl::PushAndPop<unsigned char> & buffer) "buildVariable()" and @ref packet_handler::payloadBase::buildBytes(const T & V, ecl::PushAndPop<unsigned char> & buffer) "buildBytes()".

<br>


<!-----------------------------
         Command Packets
------------------------------->

@section enCommandPackets Command Packets


<!--- Command Identifier --->
@subsection enCommandIdentifier Command Identifier

<table>
<tr><th>ID</th><th>Name</th><th>Description</th></tr>
<tr><td align="center">1</td><td>Base Control</td><td>Control wheel motors</td></tr>
<tr><td align="center">2</td><td><i>Reserved</i></td><td></td></tr>
<tr><td align="center">3</td><td>Sound</td><td>Play custom sounds</td></tr>
<tr><td align="center">4</td><td>Sound Sequence</td><td>Play predefined sounds</td></tr>
<tr><td align="center">5</td><td><i>Reserved</i></td><td></td></tr>
<tr><td align="center">6</td><td><i>Reserved</i></td><td></td></tr>
<tr><td align="center">7</td><td><i>Reserved</i></td><td></td></tr>
<tr><td align="center">8</td><td><i>Reserved</i></td><td></td></tr>
<tr><td align="center">9</td><td>Request Extra</td><td>Request extra informations</td></tr>
<tr><td align="center">10</td><td><i>Reserved</i></td><td></td></tr>
<tr><td align="center">11</td><td><i>Reserved</i></td><td></td></tr>
<tr><td align="center">12</td><td>General Purpose Output</td><td>Control general purpose outputs</td></tr>
<tr><td align="center">13</td><td>Set Controller Gain</td><td>Set PID gain of wheel velocity controller</td></tr>
<tr><td align="center">14</td><td>Get Controller Gain</td><td>Request current PID gain of wheel velocity controller</td></tr>
</table>

<br>


<!--- Base Control --->
@subsection enBaseControl Base Control

Control wheel motors to moving robot. Robot will follow the arc, which radius is <b>&lt;Radius&gt;</b> mm, with <b>&lt;Velocity&gt;</b> mm/s.

<table>
<tr><th></th><th>Name</th><th width="40">Size</th><th width="40">Value</th><th>Value in Hex</th><th>Description</th></tr>
<tr><th>Header</th><td>Identifier</td><td align="center">1</td><td align="center">1</td><td>0x01</td><td>Fixed</td></tr>
<tr><th>Length</th><td>Size of data field</td><td align="center">1</td><td align="center">4</td><td>0x04</td><td>Fixed</td></tr>
<tr><th rowspan="2">Data</th><td>Speed</td><td align="center">2</td><td align="center"></td><td></td><td>in mm/s</td></tr>
<tr><td>Radius</td><td align="center">2</td><td align="center"></td><td></td><td>in mm</td></tr>
</table>

<br>


<!--- Sound --->
@subsection enSound Sound

Play custom sounds with note and duration.

<table>
<tr><th></th><th>Name</th><th width="40">Size</th><th width="40">Value</th><th>Value in Hex</th><th>Description</th></tr>
<tr><th>Header</th><td>Identifier</td><td align="center">1</td><td align="center">3</td><td>0x03</td><td>Fixed</td></tr>
<tr><th>Length</th><td>Size of data field</td><td align="center">1</td><td align="center">3</td><td>0x03</td><td>Fixed</td></tr>
<tr><th rowspan="2">Data</th><td>Note</td><td align="center">2</td><td align="center"></td><td></td><td><!--1/(f*a)-->\f$\mbox{1/}(f \cdotp a)\f$, where \f$f\f$ is frequency of sound in Hz, and \f$a\f$ is 0.00000275</td></tr>
<tr><td>Duration</td><td align="center">1</td><td align="center"></td><td></td><td>Duration of playing note in milli-seconds</td></tr>
</table>

@warning
This command is implemented on the kobuki with firmware, but not implemented yet on driver software(kobuki_driver).

<br>



<!--- Sound Sequence --->
@subsection enSoundSequence Sound Sequence

Play predefined sounds by its index.

<table>
<tr><th></th><th>Name</th><th width="40">Size</th><th width="40">Value</th><th>Value in Hex</th><th>Description</th></tr>
<tr><th>Header</th><td>Identifier</td><td align="center">1</td><td align="center">4</td><td>0x04</td><td>Fixed</td></tr>
<tr><th>Length</th><td>Size of data field</td><td align="center">1</td><td align="center">1</td><td>0x01</td><td>Fixed</td></tr>
<tr><th>Data</th><td>Sequence number</td><td align="center">1</td><td align="center"></td><td></td><td>0 for ON sound<br>1 for OFF sound<br>2 for RECHARGE sound<br>3 for BUTTON sound<br>4 for ERROR sound<br>5 for CLEANINGSTART sound<br>6 for CLEANINGEND sound</td></tr>
</table>

<br>


<!--- Request Extra --->
@subsection enRequestExtra Request Extra

Request extra data from robot. Especially version info of kobuki; Hardware Version, Firmware Version and Unique Device IDentifier(UDID)

UDID is unique to device. so can be used to identify on multiple robots.

<table>
<tr><th></th><th>Name</th><th width="40">Size</th><th width="40">Value</th><th>Value in Hex</th><th>Description</th></tr>
<tr><th>Header</th><td>Identifier</td><td align="center">1</td><td align="center">9</td><td>0x09</td><td>Fixed</td></tr>
<tr><th>Length</th><td>Size of data field</td><td align="center">1</td><td align="center">2</td><td>0x02</td><td>Fixed</td></tr>
<tr><th>Data</th><td>Request flags</td><td align="center">2</td><td align="center"></td><td></td><td>Set the flags to request extra data<br>0x01 for Hardware Version<br>0x02 for Firmware Version<br>0x08 for Unique Device ID</td></tr>
</table>

@sa @ref enHardwareVersion @ref enFirmwareVersion,  @ref enUniqueDeviceIDentifier

<br>


<!--- General Purpose Output --->
@subsection enGeneralPurposeOutput General Purpose Output

This command has multiple roles. It controls LEDs, digital outputs and external powers.

<!--To using it carefully set the bit fields.-->

<table>
<tr><th></th><th>Name</th><th width="40">Size</th><th width="40">Value</th><th>Value in Hex</th><th>Description</th></tr>
<tr><th>Header</th><td>Identifier</td><td align="center">1</td><td align="center">12</td><td>0x0C</td><td>Fixed</td></tr>
<tr><th>Length</th><td>Size of data field</td><td align="center">1</td><td align="center">2</td><td>0x02</td><td>Fixed</td></tr>
<tr><th>Data</th><td>Digital output flags</td><td align="center">2</td><td align="center"></td><td></td><td>Set the flags to set high on output pins of expansion port<br>0x0001 for digital output ch. 0<br>0x0002 for digital output ch. 1<br>0x0004 for digital output ch. 2<br>0x0008 for digital output ch. 3<br><br>Set the flags to turn on external powers<br>0x0010 for external power 3.3V ch.<br>0x0020 for external power 5V ch.<br>0x0040 for external power 12V/5A ch.<br>0x0080 for external power 12V/1.5A ch.<br><br>Set the flags to turn on LEDs<br>0x0100 for red colour of LED1<br>0x0200 for green colour of LED1<br>0x0400 for red colour of LED2<br>0x0800 for green colour of LED2<br></td></tr>
</table>

<br>


<!--- Set Controller Gain --->
@subsection enSetControllerGain Set Controller Gain

Set PID gain of wheel velocity controller of robot.

<table>
<tr><th></th><th>Name</th><th width="40">Size</th><th width="40">Value</th><th>Value in Hex</th><th>Description</th></tr>
<tr><th>Header</th><td>Identifier</td><td align="center">1</td><td align="center">1</td><td>0x01</td><td>Fixed</td></tr>
<tr><th>Length</th><td>Size of data field</td><td align="center">1</td><td align="center">13</td><td>0x0D</td><td>Fixed</td></tr>
<tr><th rowspan="4">Data</th><td>Type</td><td align="center">1</td><td align="center"></td><td></td><td>0 for factory-default PID gain<br>1 for user-configured PID gain</td></tr>
<tr><td>P gain</td><td align="center">4</td><td align="center"></td><td></td><td>Kp * 1000</td></tr>
<tr><td>I gain</td><td align="center">4</td><td align="center"></td><td></td><td>Ki * 1000</td></tr>
<tr><td>D gain</td><td align="center">4</td><td align="center"></td><td></td><td>Kd * 1000</td></tr>
</table>

<br>


<!--- Get Controller Gain --->
@subsection enGetControllerGain Get Controller Gain

Request PID gain of wheel velocity controller of robot.

<table>
<tr><th></th><th>Name</th><th width="40">Size</th><th width="40">Value</th><th>Value in Hex</th><th>Description</th></tr>
<tr><th>Header</th><td>Identifier</td><td align="center">1</td><td align="center">1</td><td>0x01</td><td>Fixed</td></tr>
<tr><th>Length</th><td>Size of data field</td><td align="center">1</td><td align="center">14</td><td>0x0E</td><td>Fixed</td></tr>
<tr><th>Data</th><td>unused</td><td align="center">1</td><td align="center"></td><td></td><td></td></tr>
</table>

<br>



<!-----------------------------
         Feedback Packets
------------------------------->

@section enFeedbackPackets Feedback Packets


<!--- Feedback Identifier --->

@subsection enFeedbackIdentifier Feedback Identifier

Kobuki sends below default feedbacks periodically in 50 Hz, when it powered on.

<table>
<tr><th>ID</th><th>Name</th><th>Description</th><th>Availability</th></tr>
<tr><td align="center">1</td><td>Basic Sensor Data</td><td>Basic core sensor data</td><td>By default</td></tr>
<tr><td align="center">2</td><td><i>Reserved</i></td><td></td><td></td></tr>
<tr><td align="center">3</td><td>Docking IR</td><td>Signals from docking station</td><td>By default</td></tr>
<tr><td align="center">4</td><td>Inertial Sensor</td><td>Gyro data both angle and angular velocity</td><td>By default</td></tr>
<tr><td align="center">5</td><td>Cliff</td><td>PSD data facing floor</td><td>By default</td></tr>
<tr><td align="center">6</td><td>Current</td><td>Current of wheel motors</td><td>By default</td></tr>
<tr><td align="center">7</td><td><i>Reserved</i></td><td></td><td></td></tr>
<tr><td align="center">8</td><td><i>Reserved</i></td><td></td><td></td></tr>
<tr><td align="center">9</td><td><i>Reserved</i></td><td></td><td></td></tr>
<tr><td align="center">10</td><td>Hardware Version</td><td>Version number of kobuki hardware</td><td>On request</td></tr>
<tr><td align="center">11</td><td>Firmware Version</td><td>Version number of kobuki firmware</td><td>On request</td></tr>
<tr><td align="center">12</td><td><i>Reserved</i></td><td></td><td></td></tr>
<tr><td align="center">13</td><td>Raw data of 3-axis gyro</td><td>Raw ADC data of digital 3-axis gyro</td><td>By default</td></tr>
<tr><td align="center">14</td><td><i>Reserved</i></td><td></td><td></td></tr>
<tr><td align="center">15</td><td>Reserved</td><td></td><td></td></tr>
<tr><td align="center">16</td><td>General Purpose Input</td><td>Inputs from 25-pin expansion port</td><td>By default</td></tr>
<tr><td align="center">17</td><td><i>Reserved</i></td><td></td><td></td></tr>
<tr><td align="center">18</td><td><i>Reserved</i></td><td></td><td></td></tr>
<tr><td align="center">19</td><td>Unique Device IDentifier(UDID)</td><td>Unique number to identify robot</td><td>On request</td></tr>
<tr><td align="center">20</td><td><i>Reserved</i></td><td></td><td></td></tr>
<tr><td align="center">21</td><td>Controller Info</td><td>PID gain values of wheel velocity controller.</td><td>On request</td></tr>
</table>

<br>


<!--- Basic Sensor Data --->
@subsection enBasicSensorData Basic Sensor Data

Basic core sensor data. <!--Robot will sends this data periodically from power on.-->

<table>
<tr><th></th><th>Name</th><th width="40">Size</th><th width="40">Value</th><th>Value in Hex</th><th>Description</th></tr>
<tr><th>Header</th><td>Feedback Identifier</td><td align="center">1</td><td align="center">1</td><td>0x01</td><td>Fixed</td></tr>
<tr><th>Length</th><td>Size of data field</td><td align="center">1</td><td align="center">15</td><td>0x0F</td><td>Fixed</td></tr>
<tr><th rowspan="12">Data</th><td>Timestamp</td><td align="center">2</td><td align="center"></td><td></td><td>Timestamp generated internally in milliseconds<br>It circulates from 0 to 65535</td></tr>
<tr><td>Bumper</td><td align="center">1</td><td align="center"></td><td></td><td>Flag will be setted when bumper is pressed<br>0x01 for right bumper<br>0x02 for central bumper<br>0x04 for left bumper</td></td></tr>
<tr><td>Wheel drop</td><td align="center">1</td><td align="center"></td><td></td><td>Flag will be setted when wheel is dropped<br>0x01 for right wheel<br>0x02 for left wheel</td></td></tr>
<tr><td>Cliff</td><td align="center">1</td><td align="center"></td><td></td><td>Flag will be setted when cliff is detected<br>0x01 for right cliff sensor<br>0x02 for central cliff sensor<br>0x04 for left cliff sensor</td></tr>
<tr height="30"><td>Left encoder</td><td align="center">2</td><td align="center"></td><td></td><td rowspan="2">Accumulated encoder data of left and right wheels in ticks<br>Increments of this value means forward direction<br>It circulates from 0 to 65535</td></tr>
<tr height="30"><td>Right encoder</td><td align="center">2</td><td align="center"></td><td></td></tr>
<tr height="30"><td>Left PWM</td><td align="center">1</td><td align="center"></td><td></td><td rowspan="2">PWM value that applied to left and right wheel motor<br>This data should be converted signed type to represent correctly<br>Negative sign indicates backward direction</td></tr>
<tr height="30"><td>Right PWM</td><td align="center">1</td><td align="center"></td><td></td></tr>
<tr><td>Button</td><td align="center">1</td><td align="center"></td><td></td><td>Flag will be setted when button is pressed<br>0x01 for Button 0<br>0x02 for Button 1<br>0x04 for Button 2</td></tr>
<tr><td>Charger</td><td align="center">1</td><td align="center"></td><td></td><td>0 for DISCHARGING state<br>2 for DOCKING_CHARGED state<br>6 for DOCKING_CHARGING state<br>18 for ADAPTER_CHARGED state<br>22 for ADAPTER_CHARGING state</td></tr>
<tr><td>Battery</td><td align="center">1</td><td align="center"></td><td></td><td>Voltage of battery in 0.1 V<br>Typically 16.7 V when fully charged</td></tr>
<tr><td>Overcurrent flags</td><td align="center">1</td><td align="center"></td><td></td><td>Flag will be setted when overcurrent is detected<br>0x01 for left wheel<br>0x02 for right wheel</td></tr>
</table>

@note
This sub-payload will be sent by default.

<br>

<!--
<!--- Kobuki Parameters ---
@subsubsection enKobukiParameters Kobuki Parameters

<!-- TODO --
- wheelbase(bias)
- encoder ratio/gear ratio
   -# ticks_to_millimeter
   -# ticks_to_radian

<br>
-->

<!--- Docking IR --->

@subsection enDockingIR Docking IR

Signals from the docking station.

<table>
<tr><th></th><th>Name</th><th width="40">Size</th><th width="40">Value</th><th>Value in Hex</th><th>Description</th></tr>
<tr><th>Header</th><td>Identifier</td><td align="center">1</td><td align="center">3</td><td>0x03</td><td>Fixed</td></tr>
<tr><th>Length</th><td>Size of data field</td><td align="center">1</td><td align="center">3</td><td>0x03</td><td>Fixed</td></tr>
<tr height="40"><th rowspan="3">Data</th><td>Right signal</td><td align="center">1</td><td align="center"></td><td></td><td rowspan="3">Flag will be setted when signal is detected<br>0x01 for NEAR_LEFT state<br>0x02 for NEAR_CENTER state<br>0x04 for NEAR_RIGHT state<br>0x08 for FAR_CENTER state<br>ox10 for FAR_LEFT state<br>0x20 for FAR_RIGHT state</td></tr>
<tr height="40"><td>Central signal</td><td align="center">1</td><td align="center"></td><td></td></tr>
<tr height="40"><td>Left signal</td><td align="center">1</td><td align="center"></td><td></td></tr>
</table>

Kobuki's docking station has 3 <a href="http://en.wikipedia.org/wiki/Infrared">IR</a> emitters. The emitted IR lights cover three regions in front of the docking station: left, central and right, each divided in two sub-fields: near and far. Each beam encodes this information, so the robot knows at any moment in which region and sub-field he is. Also, as regions and fields are independently identified, they can be overlap on its borders.
@image html dock_ir_fields.png "Docking IR Fields"

<br>


<!--- Inertial Sensor Data --->

@subsection enInertialSensorData Inertial Sensor Data

Inertial sensor data. Only 1 axis gyro data only available.

<table>
<tr><th></th><th>Name</th><th width="40">Size</th><th width="40">Value</th><th>Value in Hex</th><th>Description</th></tr>
<tr><th>Header</th><td>Identifier</td><td align="center">1</td><td align="center">4</td><td>0x04</td><td>Fixed</td></tr>
<tr><th>Length</th><td>Size of data field</td><td align="center">1</td><td align="center">7</td><td>0x07</td><td>Fixed</td></tr>
<tr><th rowspan="5">Data</th><td>Angle</td><td align="center">2</td><td align="center"></td><td></td><td>Factory calibrated</td></tr>
<tr><td>Angle rate</td><td align="center">2</td><td align="center"></td><td></td><td>Factory calibrated</td></tr>
<tr><td>Unused</td><td align="center">1</td><td align="center"></td><td></td><td></td></tr>
<tr><td>Unused</td><td align="center">1</td><td align="center"></td><td></td><td></td></tr>
<tr><td>Unused</td><td align="center">1</td><td align="center"></td><td></td><td></td></tr>
</table>

@note
This sub-payload will be sent by default.

<br>


<!--- Cliff Sensor Data --->

@subsection enCliffSensorData Cliff Sensor Data

This sub-payload provides <a href="http://en.wikipedia.org/wiki/Analog-to-digital_converter">ADC</a> data of <a href="http://en.wikipedia.org/wiki/Position_sensitive_device">PSD</a> sensor, which is facing the floor. <!-- part name is GP2Y0A51SK0F -->

This value is related with distance between sensor and floor surface. See the <a href="http://www.beck-elektronik.de/fileadmin/templates/beck_folder/opto/sensor/sharp/analog-gp2y0a51sk0f.pdf">datasheet</a> for more detailed information.

This data also available in the Cliff field of @ref enBasicSensorData , as a boolean type, processed on the kobuki.

<table>
<tr><th></th><th>Name</th><th width="40">Size</th><th width="40">Value</th><th>Value in Hex</th><th>Description</th></tr>
<tr><th>Header</th><td>Identifier</td><td align="center">1</td><td align="center">5</td><td>0x05</td><td>Fixed</td></tr>
<tr><th>Length</th><td>Size of data field</td><td align="center">1</td><td align="center">6</td><td>0x06</td><td>Fixed</td></tr>
<tr><th rowspan="3">Data</th><td>Right cliff sensor</td><td align="center">2</td><td align="center"></td><td></td><td rowspan="3">ADC output of each PSD<br>Data range: 0 ~ 4095 (0 ~ 3.3V)<br>Distance range: 2 ~ 15 cm<br>Distance is not linear w.r.t. ADC output.<br>See the <a href="http://www.beck-elektronik.de/fileadmin/templates/beck_folder/opto/sensor/sharp/analog-gp2y0a51sk0f.pdf">datasheet</a> for more detail.</td></tr>
<tr><td>Central cliff sensor</td><td align="center">2</td><td align="center"></td><td></td></tr>
<tr><td>Left cliff sensor</td><td align="center">2</td><td align="center"></td><td></td></tr>
</table>

@note
This sub-payload will be sent by default.

@sa @ref enBasicSensorData

<br>

<!--- Current --->

@subsection enCurrent Current

Current sensor readings of wheel motors.

<table>
<tr><th></th><th>Name</th><th width="40">Size</th><th width="40">Value</th><th>Value in Hex</th><th>Description</th></tr>
<tr><th>Header</th><td>Identifier</td><td align="center">1</td><td align="center">6</td><td>0x06</td><td>Fixed</td></tr>
<tr><th>Length</th><td>Size of data field</td><td align="center">1</td><td align="center">2</td><td>0x02</td><td>Fixed</td></tr>
<tr><th rowspan="2">Data</th><td>Left motor</td><td align="center">2</td><td align="center"></td><td></td><td>in 10mA</td></tr>
<tr><td>Right motor</td><td align="center">2</td><td align="center"></td><td></td><td>in 10mA</td></tr>
</table>

@note
This sub-payload will be sent by default.

<br>


<!--- Hardware Version --->

@subsection enHardwareVersion Hardware Version

Hardware version info in triplet form; &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;

<table>
<tr><th></th><th>Name</th><th width="40">Size</th><th width="40">Value</th><th>Value in Hex</th><th>Description</th></tr>
<tr><th>Header</th><td>Identifier</td><td align="center">1</td><td align="center">10</td><td>0x0A</td><td>Fixed</td></tr>
<tr><th>Length</th><td>Size of data field</td><td align="center">1</td><td align="center">4</td><td>0x04</td><td>Fixed</td></tr>
<tr><th rowspan="4">Data</th><td>Patch</td><td align="center">1</td><td align="center"></td><td></td><td></td></tr>
<tr><td>Minor</td><td align="center">1</td><td align="center"></td><td></td><td></td></tr>
<tr><td>Major</td><td align="center">1</td><td align="center"></td><td></td><td></td></tr>
<tr><td>Unused</td><td align="center">1</td><td align="center">0</td><td>0x00</td><td>Fixed</td></tr>
</table>

@note
This sub-payload will be sent on request.
@sa @ref enRequestExtra

<br>


<!--- Firmware Version --->

@subsection enFirmwareVersion Firmware Version

Firmware version info in triplet form; &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;

<table>
<tr><th></th><th>Name</th><th width="40">Size</th><th width="40">Value</th><th>Value in Hex</th><th>Description</th></tr>
<tr><th>Header</th><td>Identifier</td><td align="center">1</td><td align="center">11</td><td>0x0B</td><td>Fixed</td></tr>
<tr><th>Length</th><td>Size of data field</td><td align="center">1</td><td align="center">4</td><td>0x04</td><td>Fixed</td></tr>
<tr><th rowspan="4">Data</th><td>Patch</td><td align="center">1</td><td align="center"></td><td></td><td></td></tr>
<tr><td>Minor</td><td align="center">1</td><td align="center"></td><td></td><td></td></tr>
<tr><td>Major</td><td align="center">1</td><td align="center"></td><td></td><td></td></tr>
<tr><td>Unused</td><td align="center">1</td><td align="center">0</td><td>0x00</td><td>Fixed</td></tr>
</table>

@note
This sub-payload will be sent on request.
@sa @ref enRequestExtra

<br>


<!--- Raw Data Of 3D Gyro --->

@subsection enRawDataOf3DGyro Raw Data Of 3D Gyro

Raw ADC data of digital 3D gyro; <a href="http://www.st.com/internet/analog/product/250373.jsp">L3G4200D</a>

Due to difference of acquisition rate and update rate, 2-3 data will be arrived at once.

Digit to deg/s ratio is 0.00875, it comes from <a href="http://www.st.com/internet/com/TECHNICAL_RESOURCES/TECHNICAL_LITERATURE/DATASHEET/CD00265057.pdf">datasheet</a> of 3d gyro.

<table>
<tr><th></th><th colspan="2">Name</th><th width="40">Size</th><th width="40">Value</th><th>Value in Hex</th><th>Description</th></tr>
<tr><th>Header</th><td colspan="2">Identifier</td><td align="center">1</td><td align="center">13</td><td>0x0D</td><td>Fixed</td></tr>
<tr><th>Length</th><td colspan="2">Size of data field</td><td align="center">1</td><td align="center">2+6N</td><td></td><td></td></tr>
<tr><th rowspan="9">Data</th><td colspan="2">Frame id</td><td align="center">1</td><td align="center"></td><td></td><td>Frame id of 'Raw gyro data 0'<br>Every sensor readings can identified by frame id<br>, It circulate from 0 to 255</td></tr>
<tr><td colspan="2">Followed data length</td><td align="center">1</td><td align="center">3N</td><td></td><td><!--Redundant for now--></td></tr>
<tr><td rowspan="3">Raw gyro data 0</td><td>x-axis</td><td align="center">2</td><td align="center"></td><td></td><td rowspan="7">ADC output of each-axis in 0.00875 deg/s</td></tr>
<tr><td>y-axis</td><td align="center">2</td><td align="center"></td><td></td></tr>
<tr><td>z-axis</td><td align="center">2</td><td align="center"></td><td></td></tr>
<tr><td colspan="5" align="center">:<br>:</td></tr>
<tr><td rowspan="3">Raw gyro data N-1</td><td>x-axis</td><td align="center">2</td><td align="center"></td><td></td></tr>
<tr><td>y-axis</td><td align="center">2</td><td align="center"></td><td></td></tr>
<tr><td>z-axis</td><td align="center">2</td><td align="center"></td><td></td></tr>
</table>

@note
This sub-payload will be sent by default.

<!--br>
@warning
describe Time compensation ...
-->

<br>

@warning
Sensing axis of 3d gyro is not match with robot. It is rotated 90 degree counterclockwise about z-axis.
So, below conversion will needed.
@code
const double digit_to_dps = 0.00875;
angular_velocity.x =  -digit_to_dps * (short)raw_gyro_data.y;
angular_velocity.y =   digit_to_dps * (short)raw_gyro_data.x;
angular_velocity.z =   digit_to_dps * (short)raw_gyro_data.z;
@endcode

<br>


<!--- General Purpose Input --->

@subsection enGeneralPurposeInput General Purpose Input

<table>
<tr><th></th><th>Name</th><th width="40">Size</th><th width="40">Value</th><th>Value in Hex</th><th>Description</th></tr>
<tr><th>Header</th><td>Identifier</td><td align="center">1</td><td align="center">16</td><td>0x10</td><td>Fixed</td></tr>
<tr><th>Length</th><td>Size of data field</td><td align="center">1</td><td align="center">16</td><td>0x10</td><td>Fixed</td></tr>
<tr><th rowspan="8">Data</th><td>Digital input</td><td align="center">2</td><td align="center"></td><td></td><td>Flag will be setted, when high voltage is applied<br>0x01 for digital input ch. 0<br>0x02 for digital input ch. 1<br>0x04 for digital input ch. 2<br>0x08 for input output ch. 3</td></tr>
<tr><td>Analog input ch.0</td><td align="center">2</td><td align="center"></td><td></td><td rowspan="4">12-bit ADC output of each channel<br>Data range: 0 ~ 4095(2^12-1)<br>Voltage range: 0 ~ 3.3 V</td></tr>
<tr><td>Analog input ch.1</td><td align="center">2</td><td align="center"></td><td></td></tr>
<tr><td>Analog input ch.2</td><td align="center">2</td><td align="center"></td><td></td></tr>
<tr><td>Analog input ch.3</td><td align="center">2</td><td align="center"></td><td></td></tr>
<tr><td>Unused</td><td align="center">2</td><td align="center"></td><td></td><td></td></tr>
<tr><td>Unused</td><td align="center">2</td><td align="center"></td><td></td><td></td></tr>
<tr><td>Unused</td><td align="center">2</td><td align="center"></td><td></td><td></td></tr>
</table>

@note
This sub-payload will be sent by default.

<br>

<!--- Unique Device IDentifier(UDID) --->

@subsection enUniqueDeviceIDentifier Unique Device IDentifier(UDID)

Contains Unique Device IDentifier of robot. This value is unique for all robot in the world.
It can be represented by triplet form: &lt;UDID0&gt;-&lt;UDID1&gt;-&lt;UDID2&gt;

<table>
<tr><th></th><th>Name</th><th width="40">Size</th><th width="40">Value</th><th>Value in Hex</th><th>Description</th></tr>
<tr><th>Header</th><td>Identifier</td><td align="center">1</td><td align="center">19</td><td>0x13</td><td>Fixed</td></tr>
<tr><th>Length</th><td>Size of data field</td><td align="center">1</td><td align="center">12</td><td>0x0C</td><td>Fixed</td></tr>
<tr><th rowspan="4">Data</th><td>UDID0</td><td align="center">4</td><td align="center"></td><td></td><td></td></tr>
<tr><td>UDID1</td><td align="center">4</td><td align="center"></td><td></td><td></td></tr>
<tr><td>UDID2</td><td align="center">4</td><td align="center"></td><td></td><td></td></tr>
</table>

@note
This sub-payload will be sent on request.
@sa @ref enRequestExtra

<br>


<!--- Controller Info --->
@subsection enControllerInfo Controller Info

Contains PID gain of wheel velocity controller of robot.

<table>
<tr><th></th><th>Name</th><th width="40">Size</th><th width="40">Value</th><th>Value in Hex</th><th>Description</th></tr>
<tr><th>Header</th><td>Identifier</td><td align="center">1</td><td align="center">1</td><td>0x01</td><td>Fixed</td></tr>
<tr><th>Length</th><td>Size of data field</td><td align="center">1</td><td align="center">21</td><td>0x15</td><td>Fixed</td></tr>
<tr><th rowspan="4">Data</th><td>Type</td><td align="center">1</td><td align="center"></td><td></td><td>Current controller setup<br>0 for factory-default PID gain<br>1 for user-configured PID gain</td></tr>
<tr><td>P gain</td><td align="center">4</td><td align="center"></td><td></td><td>Kp * 1000</td></tr>
<tr><td>I gain</td><td align="center">4</td><td align="center"></td><td></td><td>Ki * 1000</td></tr>
<tr><td>D gain</td><td align="center">4</td><td align="center"></td><td></td><td>Kd * 1000</td></tr>
</table>

<br>



**/
